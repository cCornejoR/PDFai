import {
  app,
  BrowserWindow,
  ipcMain,
  dialog,
  shell,
  safeStorage,
} from "electron";
import * as fs from "fs";
import * as path from "path";
import Store from "electron-store";
import squirrelStartup from "electron-squirrel-startup";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (squirrelStartup) {
  app.quit();
}

// Initialize secure storage
const store = new Store({
  name: "pdfai-config",
  encryptionKey: "pdfai-secure-storage-key-2024",
  schema: {
    apiKey: {
      type: "string",
      default: "",
    },
  },
});

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 1000,
    width: 1600,
    frame: false, // Ocultar titlebar nativo completamente
    titleBarStyle: process.platform === "darwin" ? "hiddenInset" : "hidden",
    titleBarOverlay: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,
      contextIsolation: true,
      webSecurity: true,
      sandbox: false, // Required for preload scripts
      allowRunningInsecureContent: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  // IPC handlers para controles de ventana
  ipcMain.handle("window-minimize", () => {
    mainWindow.minimize();
  });

  ipcMain.handle("window-maximize", () => {
    if (mainWindow.isMaximized()) {
      mainWindow.unmaximize();
    } else {
      mainWindow.maximize();
    }
  });

  ipcMain.handle("window-close", () => {
    mainWindow.close();
  });

  // IPC handlers para operaciones de archivos PDF
  ipcMain.handle("select-pdf-file", async () => {
    try {
      const result = await dialog.showOpenDialog(mainWindow, {
        title: "Select PDF File",
        filters: [{ name: "PDF Files", extensions: ["pdf"] }],
        properties: ["openFile"],
      });

      if (!result.canceled && result.filePaths.length > 0) {
        const filePath = result.filePaths[0];
        const stats = fs.statSync(filePath);

        return {
          success: true,
          file: {
            name: path.basename(filePath),
            path: filePath,
            size: stats.size,
            lastModified: stats.mtime,
          },
        };
      }

      return { success: false, error: "No file selected" };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      };
    }
  });

  ipcMain.handle("read-pdf-file", async (_, filePath: string) => {
    try {
      if (!fs.existsSync(filePath)) {
        return { success: false, error: "File not found" };
      }

      const buffer = fs.readFileSync(filePath);
      const base64 = buffer.toString("base64");

      return {
        success: true,
        data: `data:application/pdf;base64,${base64}`,
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      };
    }
  });

  ipcMain.handle("get-file-info", async (_, filePath: string) => {
    try {
      if (!fs.existsSync(filePath)) {
        return { success: false, error: "File not found" };
      }

      const stats = fs.statSync(filePath);

      return {
        success: true,
        info: {
          name: path.basename(filePath),
          path: filePath,
          size: stats.size,
          lastModified: stats.mtime,
          exists: true,
        },
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      };
    }
  });

  ipcMain.handle("open-file-location", async (_, filePath: string) => {
    try {
      shell.showItemInFolder(filePath);
      return { success: true };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      };
    }
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Secure API Key Storage Handlers
ipcMain.handle("store-api-key", async (event, apiKey: string) => {
  try {
    if (!apiKey || typeof apiKey !== "string") {
      return { success: false, error: "Invalid API key" };
    }

    // Use Electron's safeStorage if available for extra security
    if (safeStorage.isEncryptionAvailable()) {
      const encryptedKey = safeStorage.encryptString(apiKey);
      (store as any).set("apiKey", encryptedKey.toString("base64"));
      console.log("‚úÖ API key stored with safeStorage encryption");
    } else {
      // Fallback to electron-store's encryption
      (store as any).set("apiKey", apiKey);
      console.log("‚úÖ API key stored with electron-store encryption");
    }

    return { success: true };
  } catch (error) {
    console.error("‚ùå Error storing API key:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error",
    };
  }
});

ipcMain.handle("load-api-key", async () => {
  try {
    const storedKey = (store as any).get("apiKey") as string;

    if (!storedKey) {
      return { success: true, apiKey: null };
    }

    // Check if key was encrypted with safeStorage
    if (safeStorage.isEncryptionAvailable()) {
      try {
        const encryptedBuffer = Buffer.from(storedKey, "base64");
        const decryptedKey = safeStorage.decryptString(encryptedBuffer);
        console.log("‚úÖ API key loaded with safeStorage decryption");
        return { success: true, apiKey: decryptedKey };
      } catch (decryptError) {
        // If decryption fails, treat as plain text (backward compatibility)
        console.log("‚ö†Ô∏è Falling back to plain text API key");
        return { success: true, apiKey: storedKey };
      }
    } else {
      console.log("‚úÖ API key loaded from electron-store");
      return { success: true, apiKey: storedKey };
    }
  } catch (error) {
    console.error("‚ùå Error loading API key:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error",
    };
  }
});

ipcMain.handle("remove-api-key", async () => {
  try {
    (store as any).delete("apiKey");
    console.log("üóëÔ∏è API key removed from secure storage");
    return { success: true };
  } catch (error) {
    console.error("‚ùå Error removing API key:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error",
    };
  }
});

ipcMain.handle("has-api-key", async () => {
  try {
    const hasKey =
      (store as any).has("apiKey") && !!(store as any).get("apiKey");
    return { success: true, hasKey };
  } catch (error) {
    console.error("‚ùå Error checking API key:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error",
    };
  }
});

// PDF parsing handlers - Temporarily disabled due to dependency issues
// We'll use the existing PDF.js implementation in the renderer process instead

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
